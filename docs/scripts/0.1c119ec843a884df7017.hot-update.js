webpackHotUpdate(0,{

/***/ 4109:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }return target;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(540);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactUikitBase = __webpack_require__(1977);\n\nvar _reactUikitBase2 = _interopRequireDefault(_reactUikitBase);\n\nvar _ufunc = __webpack_require__(766);\n\nvar _ufunc2 = _interopRequireDefault(_ufunc);\n\nvar _reactUikitImg = __webpack_require__(3646);\n\nvar _reactUikitImg2 = _interopRequireDefault(_reactUikitImg);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nvar Overlay = function Overlay(props) {\n  // CSS classes\n  var captionCSS = {\n    bottom: 'uk-overlay-bottom',\n    left: 'uk-overlay-left',\n    right: 'uk-overlay-right',\n    top: 'uk-overlay-top'\n  };\n\n  var cssClassNames = _reactUikitBase2.default.helpers.cleanClasses(['uk-overlay', props.image ? 'uk-overlay-hover' : null, props.classes]);\n\n  var captionClassNames = _reactUikitBase2.default.helpers.cleanClasses(['uk-overlay-panel', props.background ? 'uk-overlay-background' : null, props.icon ? 'uk-overlay-icon' : null, props.caption ? captionCSS[props.caption] : null]);\n\n  // Elements\n  var link = _ufunc2.default.maybeIf(_react2.default.createElement('a', { className: 'uk-position-cover', href: '#' }), props.link);\n\n  var img = _react2.default.createElement(_reactUikitImg2.default, {\n    ref: 'img',\n    alt: props.alt,\n    height: props.height,\n    large: props.large,\n    medium: props.medium,\n    small: props.small,\n    src: props.src,\n    width: props.width,\n    type: props.type,\n    xlarge: props.xlarge,\n    className: props.image ? 'uk-overlay-panel uk-overlay-image' : null\n  });\n\n  var figure = _react2.default.createElement('figure', _extends({}, props, { className: cssClassNames }), _react2.default.createElement(_reactUikitImg2.default, {\n    ref: 'img',\n    alt: props.alt,\n    height: props.height,\n    large: props.large,\n    medium: props.medium,\n    small: props.small,\n    src: props.image,\n    width: props.width,\n    type: props.type,\n    xlarge: props.xlarge,\n    'data-kitid': props.kitid\n  }), img, link);\n\n  var caption = _react2.default.createElement('figcaption', _extends({\n    className: captionClassNames\n  }, props, {\n    'data-kitid': props.kitid\n  }), props.children);\n\n  var linkCaption = _react2.default.createElement('div', _extends({\n    className: cssClassNames\n  }, props, {\n    'data-kitid': props.kitid\n  }), props.children);\n\n  var figureCaption = _react2.default.createElement('figure', _extends({\n    className: cssClassNames\n  }, props, {\n    'data-kitid': props.kitid\n  }), img, _ufunc2.default.either(linkCaption, caption)(props.link), link);\n\n  // Return Component\n  var component = _ufunc2.default.either(figure, figureCaption);\n  return component(props.image);\n};\n\nOverlay.propTypes = {\n  alt: _react2.default.PropTypes.string,\n  background: _react2.default.PropTypes.bool,\n  flex: _react2.default.PropTypes.bool,\n  height: _react2.default.PropTypes.string,\n  icon: _react2.default.PropTypes.bool,\n  image: _react2.default.PropTypes.string,\n  large: _react2.default.PropTypes.object,\n  medium: _react2.default.PropTypes.object,\n  // does not render Correctly\n  caption: _react2.default.PropTypes.string,\n  small: _react2.default.PropTypes.object,\n  src: _react2.default.PropTypes.string,\n  width: _react2.default.PropTypes.string,\n  xlarge: _react2.default.PropTypes.object\n};\n\nexports.default = _reactUikitBase2.default.base(Overlay);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vY29tcG9uZW50cy9yZWFjdC11aWtpdC1vdmVybGF5L2xpYi9vdmVybGF5LmpzPzc3ZDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUViLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksVUFBVSxNQUFNLEVBQUU7QUFBRSxPQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUFFLFFBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBRSxLQUFLLElBQUksR0FBRyxJQUFJLE1BQU0sRUFBRTtBQUFFLFVBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRTtBQUFFLGNBQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7T0FBRTtLQUFFO0dBQUcsT0FBTyxNQUFNLENBQUM7Q0FBRSxDQUFDOztBQUVqUSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUU7QUFDM0MsT0FBSyxFQUFFLElBQUk7Q0FDWixDQUFDLENBQUM7O0FBRUgsSUFBSSxNQUFNLEdBQUcsbUJBQU8sQ0FBQyxHQUFPLENBQUMsQ0FBQzs7QUFFOUIsSUFBSSxPQUFPLEdBQUcsc0JBQXNCLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRTdDLElBQUksZUFBZSxHQUFHLG1CQUFPLENBQUMsSUFBa0IsQ0FBQyxDQUFDOztBQUVsRCxJQUFJLGdCQUFnQixHQUFHLHNCQUFzQixDQUFDLGVBQWUsQ0FBQyxDQUFDOztBQUUvRCxJQUFJLE1BQU0sR0FBRyxtQkFBTyxDQUFDLEdBQU8sQ0FBQyxDQUFDOztBQUU5QixJQUFJLE9BQU8sR0FBRyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFN0MsSUFBSSxj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TyxDQUFDLFNBQVMsR0FBRztBQUNsQixLQUFHLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTTtBQUNyQyxZQUFVLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSTtBQUMxQyxNQUFJLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSTtBQUNwQyxRQUFNLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTTtBQUN4QyxNQUFJLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSTtBQUNwQyxPQUFLLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTTtBQUN2QyxPQUFLLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTTtBQUN2QyxRQUFNLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTTs7QUFFeEMsU0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU07QUFDekMsT0FBSyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU07QUFDdkMsS0FBRyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU07QUFDckMsT0FBSyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU07QUFDdkMsUUFBTSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU07Q0FDekMsQ0FBQzs7QUFFRixPQUFPLENBQUMsT0FBTyxHQUFHLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDIiwiZmlsZSI6IjQxMDkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdFVpa2l0QmFzZSA9IHJlcXVpcmUoJ3JlYWN0LXVpa2l0LWJhc2UnKTtcblxudmFyIF9yZWFjdFVpa2l0QmFzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdFVpa2l0QmFzZSk7XG5cbnZhciBfdWZ1bmMgPSByZXF1aXJlKCd1ZnVuYycpO1xuXG52YXIgX3VmdW5jMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VmdW5jKTtcblxudmFyIF9yZWFjdFVpa2l0SW1nID0gcmVxdWlyZSgncmVhY3QtdWlraXQtaW1nJyk7XG5cbnZhciBfcmVhY3RVaWtpdEltZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdFVpa2l0SW1nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIE92ZXJsYXkgPSBmdW5jdGlvbiBPdmVybGF5KHByb3BzKSB7XG4gIC8vIENTUyBjbGFzc2VzXG4gIHZhciBjYXB0aW9uQ1NTID0ge1xuICAgIGJvdHRvbTogJ3VrLW92ZXJsYXktYm90dG9tJyxcbiAgICBsZWZ0OiAndWstb3ZlcmxheS1sZWZ0JyxcbiAgICByaWdodDogJ3VrLW92ZXJsYXktcmlnaHQnLFxuICAgIHRvcDogJ3VrLW92ZXJsYXktdG9wJ1xuICB9O1xuXG4gIHZhciBjc3NDbGFzc05hbWVzID0gX3JlYWN0VWlraXRCYXNlMi5kZWZhdWx0LmhlbHBlcnMuY2xlYW5DbGFzc2VzKFsndWstb3ZlcmxheScsIHByb3BzLmltYWdlID8gJ3VrLW92ZXJsYXktaG92ZXInIDogbnVsbCwgcHJvcHMuY2xhc3Nlc10pO1xuXG4gIHZhciBjYXB0aW9uQ2xhc3NOYW1lcyA9IF9yZWFjdFVpa2l0QmFzZTIuZGVmYXVsdC5oZWxwZXJzLmNsZWFuQ2xhc3NlcyhbJ3VrLW92ZXJsYXktcGFuZWwnLCBwcm9wcy5iYWNrZ3JvdW5kID8gJ3VrLW92ZXJsYXktYmFja2dyb3VuZCcgOiBudWxsLCBwcm9wcy5pY29uID8gJ3VrLW92ZXJsYXktaWNvbicgOiBudWxsLCBwcm9wcy5jYXB0aW9uID8gY2FwdGlvbkNTU1twcm9wcy5jYXB0aW9uXSA6IG51bGxdKTtcblxuICAvLyBFbGVtZW50c1xuICB2YXIgbGluayA9IF91ZnVuYzIuZGVmYXVsdC5tYXliZUlmKF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdhJywgeyBjbGFzc05hbWU6ICd1ay1wb3NpdGlvbi1jb3ZlcicsIGhyZWY6ICcjJyB9KSwgcHJvcHMubGluayk7XG5cbiAgdmFyIGltZyA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFVpa2l0SW1nMi5kZWZhdWx0LCB7XG4gICAgcmVmOiAnaW1nJyxcbiAgICBhbHQ6IHByb3BzLmFsdCxcbiAgICBoZWlnaHQ6IHByb3BzLmhlaWdodCxcbiAgICBsYXJnZTogcHJvcHMubGFyZ2UsXG4gICAgbWVkaXVtOiBwcm9wcy5tZWRpdW0sXG4gICAgc21hbGw6IHByb3BzLnNtYWxsLFxuICAgIHNyYzogcHJvcHMuc3JjLFxuICAgIHdpZHRoOiBwcm9wcy53aWR0aCxcbiAgICB0eXBlOiBwcm9wcy50eXBlLFxuICAgIHhsYXJnZTogcHJvcHMueGxhcmdlLFxuICAgIGNsYXNzTmFtZTogcHJvcHMuaW1hZ2UgPyAndWstb3ZlcmxheS1wYW5lbCB1ay1vdmVybGF5LWltYWdlJyA6IG51bGxcbiAgfSk7XG5cbiAgdmFyIGZpZ3VyZSA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdmaWd1cmUnLFxuICAgIF9leHRlbmRzKHt9LCBwcm9wcywgeyBjbGFzc05hbWU6IGNzc0NsYXNzTmFtZXMgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0VWlraXRJbWcyLmRlZmF1bHQsIHtcbiAgICAgIHJlZjogJ2ltZycsXG4gICAgICBhbHQ6IHByb3BzLmFsdCxcbiAgICAgIGhlaWdodDogcHJvcHMuaGVpZ2h0LFxuICAgICAgbGFyZ2U6IHByb3BzLmxhcmdlLFxuICAgICAgbWVkaXVtOiBwcm9wcy5tZWRpdW0sXG4gICAgICBzbWFsbDogcHJvcHMuc21hbGwsXG4gICAgICBzcmM6IHByb3BzLmltYWdlLFxuICAgICAgd2lkdGg6IHByb3BzLndpZHRoLFxuICAgICAgdHlwZTogcHJvcHMudHlwZSxcbiAgICAgIHhsYXJnZTogcHJvcHMueGxhcmdlLFxuICAgICAgJ2RhdGEta2l0aWQnOiBwcm9wcy5raXRpZFxuICAgIH0pLFxuICAgIGltZyxcbiAgICBsaW5rXG4gICk7XG5cbiAgdmFyIGNhcHRpb24gPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZmlnY2FwdGlvbicsXG4gICAgX2V4dGVuZHMoe1xuICAgICAgY2xhc3NOYW1lOiBjYXB0aW9uQ2xhc3NOYW1lc1xuICAgIH0sIHByb3BzLCB7XG4gICAgICAnZGF0YS1raXRpZCc6IHByb3BzLmtpdGlkXG4gICAgfSksXG4gICAgcHJvcHMuY2hpbGRyZW5cbiAgKTtcblxuICB2YXIgbGlua0NhcHRpb24gPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICBfZXh0ZW5kcyh7XG4gICAgICBjbGFzc05hbWU6IGNzc0NsYXNzTmFtZXNcbiAgICB9LCBwcm9wcywge1xuICAgICAgJ2RhdGEta2l0aWQnOiBwcm9wcy5raXRpZFxuICAgIH0pLFxuICAgIHByb3BzLmNoaWxkcmVuXG4gICk7XG5cbiAgdmFyIGZpZ3VyZUNhcHRpb24gPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZmlndXJlJyxcbiAgICBfZXh0ZW5kcyh7XG4gICAgICBjbGFzc05hbWU6IGNzc0NsYXNzTmFtZXNcbiAgICB9LCBwcm9wcywge1xuICAgICAgJ2RhdGEta2l0aWQnOiBwcm9wcy5raXRpZFxuICAgIH0pLFxuICAgIGltZyxcbiAgICBfdWZ1bmMyLmRlZmF1bHQuZWl0aGVyKGxpbmtDYXB0aW9uLCBjYXB0aW9uKShwcm9wcy5saW5rKSxcbiAgICBsaW5rXG4gICk7XG5cbiAgLy8gUmV0dXJuIENvbXBvbmVudFxuICB2YXIgY29tcG9uZW50ID0gX3VmdW5jMi5kZWZhdWx0LmVpdGhlcihmaWd1cmUsIGZpZ3VyZUNhcHRpb24pO1xuICByZXR1cm4gY29tcG9uZW50KHByb3BzLmltYWdlKTtcbn07XG5cbk92ZXJsYXkucHJvcFR5cGVzID0ge1xuICBhbHQ6IF9yZWFjdDIuZGVmYXVsdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICBiYWNrZ3JvdW5kOiBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzLmJvb2wsXG4gIGZsZXg6IF9yZWFjdDIuZGVmYXVsdC5Qcm9wVHlwZXMuYm9vbCxcbiAgaGVpZ2h0OiBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzLnN0cmluZyxcbiAgaWNvbjogX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcy5ib29sLFxuICBpbWFnZTogX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcy5zdHJpbmcsXG4gIGxhcmdlOiBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzLm9iamVjdCxcbiAgbWVkaXVtOiBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzLm9iamVjdCxcbiAgLy8gZG9lcyBub3QgcmVuZGVyIENvcnJlY3RseVxuICBjYXB0aW9uOiBfcmVhY3QyLmRlZmF1bHQuUHJvcFR5cGVzLnN0cmluZyxcbiAgc21hbGw6IF9yZWFjdDIuZGVmYXVsdC5Qcm9wVHlwZXMub2JqZWN0LFxuICBzcmM6IF9yZWFjdDIuZGVmYXVsdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICB3aWR0aDogX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcy5zdHJpbmcsXG4gIHhsYXJnZTogX3JlYWN0Mi5kZWZhdWx0LlByb3BUeXBlcy5vYmplY3Rcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9yZWFjdFVpa2l0QmFzZTIuZGVmYXVsdC5iYXNlKE92ZXJsYXkpO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4uL2NvbXBvbmVudHMvcmVhY3QtdWlraXQtb3ZlcmxheS9saWIvb3ZlcmxheS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }

})
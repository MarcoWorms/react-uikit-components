webpackHotUpdate(0,{

/***/ 4126:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nfunction _typeof(obj) { return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; }\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }return target;\n};\n\nvar _createClass = (function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n  };\n})();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactUikitBase = __webpack_require__(138);\n\nvar _reactUikitBase2 = _interopRequireDefault(_reactUikitBase);\n\nvar _ufunc = __webpack_require__(141);\n\nvar _ufunc2 = _interopRequireDefault(_ufunc);\n\nvar _reactUikitImg = __webpack_require__(1852);\n\nvar _reactUikitImg2 = _interopRequireDefault(_reactUikitImg);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Thumbnail = (function (_React$Component) {\n  _inherits(Thumbnail, _React$Component);\n\n  function Thumbnail() {\n    _classCallCheck(this, Thumbnail);\n\n    return _possibleConstructorReturn(this, Object.getPrototypeOf(Thumbnail).apply(this, arguments));\n  }\n\n  _createClass(Thumbnail, [{\n    key: 'render',\n    value: function render() {\n      var props = this.props;\n\n      // CSS classes\n      var size = {\n        large: 'uk-thumbnail-large',\n        medium: 'uk-thumbnail-medium',\n        small: 'uk-thumbnail-small',\n        mini: 'uk-thumbnail-mini',\n        expand: 'uk-thumbnail-expand'\n      };\n\n      var cssClassNames = _reactUikitBase2.default.helpers.cleanClasses(['uk-thumbnail', props.classes, props.className, size[props.size] || null]);\n\n      // Elements\n      var img = _react2.default.createElement(_reactUikitImg2.default, _extends({}, props.imgProps, {\n        kitid: props.imgid,\n        src: props.src,\n        width: props.width,\n        heigh: props.heigh,\n        small: props.small,\n        medium: props.medium,\n        large: props.large,\n        xlarge: props.xlarge\n      }));\n\n      var figcaption = _react2.default.createElement('figcaption', {\n        className: 'uk-thumbnail-caption'\n      }, props.children);\n\n      var caption = _react2.default.createElement('div', { className: 'uk-thumbnail-caption' }, props.children);\n\n      var children = _ufunc2.default.maybeIf(_ufunc2.default.either(figcaption, caption)(props.type === 'figure'))(props.children);\n\n      var ignoreProps = ['height', 'src', 'width'];\n      var cleanProps = _reactUikitBase2.default.helpers.cleanProps(ignoreProps)(props);\n\n      var attr = _extends({}, cleanProps, {\n        className: cssClassNames,\n        'data-kitid': props.kitid\n      });\n\n      var type = {\n        block: _react2.default.createElement('div', attr, img, children),\n\n        figure: _react2.default.createElement('figure', attr, img, children),\n\n        link: _react2.default.createElement('a', _extends({}, attr, { href: props.href }), img, children)\n      };\n\n      // Return Component\n      return type[props.type] || type['block'];\n    }\n  }]);\n\n  return Thumbnail;\n})(_react2.default.Component);\n\nThumbnail.propTypes = {\n  imgid: _react2.default.PropTypes.string,\n  imgProps: _react2.default.PropTypes.object,\n  size: _react2.default.PropTypes.oneOf(['large', 'medium', 'small', 'mini', 'expand']),\n  type: _react2.default.PropTypes.oneOf(['block', 'figure', 'link'])\n};\n\nexports.default = _reactUikitBase2.default.base(Thumbnail);\n//# sourceMappingURL=data:application/json;base64,");

/***/ }

})
webpackHotUpdate(0,{

/***/ 620:
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nfunction _typeof(obj) { return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; }\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }return target;\n};\n\nvar _createClass = (function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n  };\n})();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(119);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _ufunc = __webpack_require__(120);\n\nvar _ufunc2 = _interopRequireDefault(_ufunc);\n\nvar _cuid = __webpack_require__(395);\n\nvar _cuid2 = _interopRequireDefault(_cuid);\n\nvar _posOffset = __webpack_require__(621);\n\nvar _posOffset2 = _interopRequireDefault(_posOffset);\n\nvar _ramda = __webpack_require__(249);\n\nvar _ramda2 = _interopRequireDefault(_ramda);\n\nvar _reactUikitBase = __webpack_require__(153);\n\nvar _reactUikitBase2 = _interopRequireDefault(_reactUikitBase);\n\nvar _reactUikitTrigger = __webpack_require__(623);\n\nvar _reactUikitTrigger2 = _interopRequireDefault(_reactUikitTrigger);\n\nvar _dropbody = __webpack_require__(619);\n\nvar _dropbody2 = _interopRequireDefault(_dropbody);\n\nvar _reactUikitButton = __webpack_require__(411);\n\nvar _reactUikitButton2 = _interopRequireDefault(_reactUikitButton);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof(call)) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof(superClass)));\n  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Dropdown = (function (_React$Component) {\n  _inherits(Dropdown, _React$Component);\n\n  function Dropdown(props) {\n    _classCallCheck(this, Dropdown);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Dropdown).call(this, props));\n\n    _this.state = {\n      opened: false,\n      hover: props.hover\n    };\n\n    _this.dataId = props.kitid || (0, _cuid2.default)();\n    return _this;\n  }\n\n  _createClass(Dropdown, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.hover) {\n        window.addEventListener('mouseover', function (e) {\n          return _this2.handleHoverListener(e);\n        }, true);\n        window.addEventListener('mouseout', function (e) {\n          return _this2.handleHoverListener(e);\n        }, false);\n      } else {\n        window.addEventListener('click', function () {\n          return _this2.handleClickListener();\n        }, true);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var _this3 = this;\n\n      if (this.props.hover) {\n        window.removeEventListener('mouseover', function (e) {\n          return _this3.handleHoverListener(e);\n        }, false);\n        window.removeEventListener('mouseout', function (e) {\n          return _this3.handleHoverListener(e);\n        }, false);\n      } else {\n        window.removeEventListener('click', function () {\n          return _this3.handleClickListener();\n        }, false);\n      }\n    }\n  }, {\n    key: 'animate',\n    value: function animate(state, trigger) {\n      var _this4 = this;\n\n      return function (element) {\n        var animateIn = function animateIn() {\n          console.log('in');\n          _this4.setState(state);\n          trigger.animate.in(element);\n        };\n\n        var animateOut = function animateOut() {\n          console.log('out');\n          _this4.setState(state);\n          trigger.animate.out(element);\n        };\n        console.log(Object.keys(state)[0]);\n\n        _ufunc2.default.either(animateIn, animateOut)(Object.keys(state)[0]);\n      };\n    }\n  }, {\n    key: 'handleClickListener',\n    value: function handleClickListener() {\n      if (this.state.opened) {\n        var dropbody = _reactUikitBase2.default.helpers.queryData('dropdown-' + this.dataId);\n        dropbody.style.display = 'none';\n        this.animate({ opened: false }, this.props.trigger)(dropbody);\n      }\n    }\n  }, {\n    key: 'handleHoverListener',\n    value: function handleHoverListener(e) {\n      var kitid = e.target.getAttribute('data-kitid');\n\n      if (kitid === this.dataId) {\n        var dropbody = _reactUikitBase2.default.helpers.queryData('dropdown-' + this.dataId);\n\n        // ufunc.either(\n        //   () => dropbody.style.display = 'block',\n        //   () => dropbody.style.display = 'none'\n        // )(this.state.hover);\n\n        this.animate({ hover: this.state.hover }, this.props.trigger)(dropbody);\n\n        // this.setState({hover: !this.state.hover});\n      }\n    }\n  }, {\n    key: 'handleTriggerClick',\n    value: function handleTriggerClick(e) {\n      e.preventDefault();\n      var props = this.props;\n      var dropbody = _reactUikitBase2.default.helpers.queryData('dropdown-' + this.dataId);\n      var trigger = e.currentTarget;\n\n      var toHidden = function toHidden(element) {\n        element.style.display = 'block';\n        element.style.visibility = 'hidden';\n\n        return element;\n      };\n\n      var justify = function justify(element) {\n        if (props.justify) {\n          var _justify = _reactUikitBase2.default.helpers.queryData(props.justify);\n          element.style.width = _posOffset2.default.dim(_justify).width + 'px';\n        }\n\n        return element;\n      };\n\n      var getPosition = function getPosition(element) {\n        var elementOffset = _posOffset2.default.offset({\n          target: trigger,\n          element: element,\n          flip: !props.noflip,\n          boundary: props.boundary\n        })(props.pos);\n\n        element.style.top = elementOffset.top + 'px';\n\n        if (props.type === 'button-group') {\n          var buttonGroup = document.querySelector('.uk-button-group');\n          var paddingLeft = window.getComputedStyle(buttonGroup, null).getPropertyValue('padding-left');\n\n          element.style.left = paddingLeft;\n        } else {\n          element.style.left = elementOffset.left + 'px';\n        }\n\n        return element;\n      };\n\n      _ramda2.default.pipe(toHidden, justify, getPosition, this.animate({ opened: !this.state.opened }, props.trigger))(dropbody);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this5 = this;\n\n      var props = this.props;\n      var kitid = _ufunc2.default.either(props.kitid, this.dataId)(props.kitid);\n\n      // CSS classes\n      var type = {\n        button: 'uk-button-dropdown',\n        'button-group': 'uk-button-group',\n        dropdown: null,\n        navbar: 'uk-parent'\n      };\n\n      var cssClassNames = _reactUikitBase2.default.helpers.cleanClasses([type[props.type] || type['dropdown'], props.classes, props.className]);\n\n      var cssDropClassNames = _reactUikitBase2.default.helpers.cleanClasses([!props.blank ? 'uk-dropdown' : 'uk-dropdown-blank', props.grid ? 'uk-dropdown-width-' + props.grid : null, props.scrollable ? 'uk-dropdown-scrollable' : null, props.small ? 'uk-dropdown-small' : null, props.type === 'navbar' ? 'uk-dropdown-navbar' : null]);\n\n      // Elements\n      var cleanProps = _reactUikitBase2.default.helpers.cleanProps(props, ['type']);\n      var cleanTriggerProps = _ufunc2.default.either(_reactUikitBase2.default.helpers.cleanProps(props.trigger, ['body']), props.trigger)(props.type === 'button-group');\n\n      var attr = {\n        'aria-haspopup': 'true',\n        'aria-expanded': this.state.opened ? 'true' : 'false',\n        'data-kitid': 'dropContainer-' + kitid,\n        'className': cssClassNames\n      };\n\n      var dropbodyProps = Object.assign({\n        style: props.justify ? { width: _posOffset2.default.dim(this) } : null,\n        'data-kitid': 'dropdown-' + kitid,\n        className: cssDropClassNames\n      }, props.dropbody ? props.dropbody : {});\n\n      var grid = _react2.default.createElement('div', { className: 'uk-grid uk-dropdown-grid' }, props.children);\n\n      var dropbody = _react2.default.createElement(_dropbody2.default, dropbodyProps, _ufunc2.default.either(function () {\n        return grid;\n      }, function () {\n        return props.children;\n      })(props.grid));\n\n      var trigger = function trigger(mode) {\n        return _react2.default.createElement(_reactUikitTrigger2.default, _extends({}, cleanTriggerProps, {\n          icon: props.icon || 'caret-down',\n          kitid: kitid,\n          onClick: function onClick(e) {\n            return _this5.handleTriggerClick(e);\n          }\n        }));\n      };\n\n      var component = {\n        dropdown: _react2.default.createElement('div', _extends({}, cleanProps, attr), trigger(), dropbody),\n\n        'button-group': _react2.default.createElement('div', _extends({}, cleanProps, attr), _react2.default.createElement(_reactUikitButton2.default, props.standard, props.children), _react2.default.createElement('div', null, trigger('link'), dropbody)),\n\n        navbar: _react2.default.createElement('li', _extends({}, cleanProps, attr), _react2.default.createElement(_reactUikitButton2.default, null, props.children), _react2.default.createElement('div', null, trigger('link'), dropbody))\n      };\n\n      // Return Component\n      return component[props.type] || component['dropdown'];\n    }\n  }]);\n\n  return Dropdown;\n})(_react2.default.Component);\n\nDropdown.propTypes = {\n  blank: _react2.default.PropTypes.bool,\n  boundary: _react2.default.PropTypes.string,\n  dropbody: _react2.default.PropTypes.object,\n  children: _react2.default.PropTypes.any,\n  className: _react2.default.PropTypes.string,\n  classes: _react2.default.PropTypes.array,\n  grid: _react2.default.PropTypes.string,\n  hover: _react2.default.PropTypes.bool,\n  items: _react2.default.PropTypes.array,\n  justify: _react2.default.PropTypes.string,\n  kitid: _react2.default.PropTypes.string,\n  navbar: _react2.default.PropTypes.bool,\n  noflip: _react2.default.PropTypes.bool,\n  parent: _react2.default.PropTypes.bool,\n  pos: _react2.default.PropTypes.string,\n  scrollable: _react2.default.PropTypes.bool,\n  small: _react2.default.PropTypes.bool,\n  standard: _react2.default.PropTypes.object,\n  trigger: _react2.default.PropTypes.object,\n  type: _react2.default.PropTypes.oneOf(['button', 'button-group', 'dropdown', 'grid', 'navbar'])\n};\n;\n\nexports.default = _reactUikitBase2.default.base(Dropdown);\n//# sourceMappingURL=data:application/json;base64,");

/***/ }

})